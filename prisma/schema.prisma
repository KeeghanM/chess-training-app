// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Course {
    id         String   @id @default(cuid())
    courseName String
    groupNames String
    createdBy  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    published  Boolean  @default(false)
    lines      Line[]
}

model Line {
    id        String   @id @default(cuid())
    courseId  String
    lineName  String
    colour    String
    groupName String
    moves     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model UserCourse {
    id            String   @id @default(cuid())
    courseId      String
    userId        String
    active        Boolean  @default(true)
    lastTrained   DateTime
    linesLearned  Int
    linesLearning Int
    linesHard     Int
    linesUnseen   Int
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LineStat {
    id           String     @id @default(cuid())
    courseId     String
    userId       String
    userCourseId String
    lineId       String
    lastTrained  DateTime
    timesTrained Int
    timesCorrect Int
    timesWrong   Int
    moves        MoveStat[]
}

model MoveStat {
    id           Int      @id @default(autoincrement())
    lineStatId   String
    move         String
    lastTrained  DateTime
    timesTrained Int
    timesCorrect Int
    timesWrong   Int
    line         LineStat @relation(fields: [lineStatId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    courseStats   UserCourse[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
