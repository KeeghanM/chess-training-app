// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Courses
model Course {
    id                String       @id @default(cuid())
    courseName        String
    slug              String       @unique
    courseDescription String?      @db.Text
    createdBy         String
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    published         Boolean      @default(false)
    lines             Line[]
    groups            Group[]
    userCourses       UserCourse[]
}

model Group {
    id        String   @id @default(cuid())
    courseId  String
    groupName String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    lines     Line[]
}

model UserCourse {
    id            String     @id @default(cuid())
    courseId      String
    userId        String
    active        Boolean    @default(true)
    lastTrained   DateTime?
    linesLearned  Int        @default(0)
    linesLearning Int        @default(0)
    linesHard     Int        @default(0)
    linesUnseen   Int
    user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    lines         UserLine[]
    fens          UserFen[]
    course        Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Line {
    id        String     @id @default(cuid())
    courseId  String
    lineName  String?
    colour    String
    groupId   String
    moves     String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    group     Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
    userLines UserLine[]
}

model UserLine {
    id           String     @id @default(cuid())
    courseId     String
    userId       String
    userCourseId String
    lineId       String
    lastTrained  DateTime?
    lastStatus   Boolean?
    timesTrained Int        @default(0)
    timesCorrect Int        @default(0)
    timesWrong   Int        @default(0)
    course       UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
    line         Line       @relation(fields: [lineId], references: [id], onDelete: Cascade)
}

model UserFen {
    id           String     @id @default(cuid())
    userCourseId String
    fen          String
    timesTrained Int        @default(0)
    timesCorrect Int        @default(0)
    timesWrong   Int        @default(0)
    course       UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
}

// Tactics Trainer
model TacticsSet {
    id          String            @id @default(cuid())
    name        String
    userId      String
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    lastTrained DateTime?
    user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    puzzles     Puzzle[]
    rounds      TacticsSetRound[]
}

model Puzzle {
    id        String     @id @default(cuid())
    setId     String
    fen       String
    moves     String
    rating    Int
    themes    String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    set       TacticsSet @relation(fields: [setId], references: [id], onDelete: Cascade)
}

model TacticsSetRound {
    id          String     @id @default(cuid())
    roundNumber Int
    timeSpent   Int        @default(0)
    correct     Int        @default(0)
    incorrect   Int        @default(0)
    setId       String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    set         TacticsSet @relation(fields: [setId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    courseStats   UserCourse[]
    tacticsSets   TacticsSet[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
